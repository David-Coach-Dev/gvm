name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        go build -ldflags="-s -w -X 'main.version=$VERSION'" -o gvm-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} main.go

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gvm-${{ matrix.goos }}-${{ matrix.goarch }}
        path: gvm-*

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Prepare release files
      run: |
        mkdir -p release
        find . -name "gvm-*" -type f -exec cp {} release/ \;

        # Create main executables (like NVM-Windows)
        if [ -f "release/gvm-windows-amd64.exe" ]; then
          cp release/gvm-windows-amd64.exe release/gvm.exe
          cp release/gvm-windows-amd64.exe release/gvm-setup.exe
        fi

        # Create checksums
        cd release
        sha256sum * > checksums.txt
        md5sum * > md5sums.txt

        # Show files
        ls -la

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## ðŸš€ Installation

          ### One-line Installation (recommended)

          **PowerShell (Windows):**
          ```powershell
          iwr -useb https://raw.githubusercontent.com/David-Coach-Dev/gvm/main/install-nvm-style.ps1 | iex
          ```

          **Bash (Linux/macOS):**
          ```bash
          curl -o- https://raw.githubusercontent.com/David-Coach-Dev/gvm/main/install.sh | bash
          ```

          **Command Prompt (Windows):**
          ```cmd
          curl -o install-gvm.bat https://raw.githubusercontent.com/David-Coach-Dev/gvm/main/install-gvm.bat && install-gvm.bat
          ```

          ### Manual Installation

          1. Download `gvm-setup.exe` (Windows) or appropriate binary for your system
          2. Run the installer or add binary to your PATH
          3. Start using GVM!

          ## ðŸ“¦ Assets

          - **`gvm-setup.exe`** - Main Windows installer
          - **`gvm.exe`** - Windows binary
          - **`gvm-linux-amd64`** - Linux binary (AMD64)
          - **`gvm-darwin-amd64`** - macOS binary (Intel)
          - **`gvm-darwin-arm64`** - macOS binary (Apple Silicon)
          - **`checksums.txt`** - SHA256 checksums
          - **`md5sums.txt`** - MD5 checksums

          ## ðŸŽ¯ Commands

          ```bash
          gvm install 1.21.0    # Install Go 1.21.0
          gvm use 1.21.0        # Switch to Go 1.21.0
          gvm list              # List installed versions
          gvm listall           # List available versions
          gvm uninstall 1.20.5  # Remove Go 1.20.5
          ```

          ## ðŸ’¡ Features

          - âœ… **Zero Dependencies** - No Go required for installation
          - âœ… **Cross-platform** - Windows, Linux, macOS
          - âœ… **NVM-inspired** - Familiar commands and workflow
          - âœ… **Auto-switching** - Support for `.go-version` files
          - âœ… **Shell Integration** - PowerShell, Bash, Zsh, Fish

          ---

          **Full Changelog:** [${{ github.event.before }}...${{ github.sha }}](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
